{{/*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/}}

{{- $env := concat .Values.env .Values.om.env }}
{{- $envFrom := concat .Values.envFrom .Values.om.envFrom }}
{{- $nodeSelector := or .Values.om.nodeSelector .Values.nodeSelector }}
{{- $affinity := or .Values.om.affinity .Values.affinity }}
{{- $tolerations := or .Values.om.tolerations .Values.tolerations }}
{{- $securityContext := or .Values.om.securityContext .Values.securityContext }}
{{- $bnodes := ternary (splitList "," (include "ozone.om.bootstrap.nodes" .)) (list) (ne "" (include "ozone.om.bootstrap.nodes" .)) }}
{{- $activeNodes := ternary (splitList "," (include "ozone.om.cluster.ids" .)) (list) (ne "" (include "ozone.om.cluster.ids" .)) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-om
  labels:
    {{- include "ozone.labels" . | nindent 4 }}
    app.kubernetes.io/component: om
spec:
  replicas: {{ .Values.om.replicas }}
  serviceName: {{ .Release.Name }}-om-headless
  selector:
    matchLabels:
      {{- include "ozone.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: om
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/ozone-configmap.yaml") . | cat (include "ozone.configuration.env" .) | sha256sum }}
      labels:
        {{- include "ozone.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: om
    spec:
      containers:
        - name: om
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.om.command }}
          command: {{- tpl (toYaml .) $ | nindent 12 }}
          {{- end }}
          args:
            - sh
            - -c
            - |
              set -e
              HELM_MANAGER_PATH="{{ .Values.om.persistence.path }}{{ .Values.helm.persistence.path }}"
              HELM_MANAGER_BOOTSTRAPPED_FILE="$HELM_MANAGER_PATH/bootstrapped"
              {{- $flattenedArgs := join " " $.Values.om.args }}
              {{- if and (.Values.om.persistence.enabled) (gt (len $bnodes) 0) }}
                joinArr() {
                  local IFS=","
                  echo "$*"
                }
                bootstrap_finalizer() {
                  echo "Init bootrap finalizer process..."
                  while true; do
                    IFS= read -r line;
                    echo "$line"
                      if echo "$line" | grep -q "Successfully bootstrapped OM $HOSTNAME and joined the Ratis group"; then
                      echo "$HOSTNAME was successfully bootstrapped!"
                      mkdir -p "$HELM_MANAGER_PATH"
                      touch "$HELM_MANAGER_BOOTSTRAPPED_FILE"
                      break;
                    fi
                  done
                  echo "Bootstrap finalizer process finished!"
                  exit 0
                }
                bootstrapHosts="{{ join "," $bnodes }}"
                echo "Need to handle bootstrap for nodes $bootstrapHosts"
                IFS=',' read -r -a hostArray <<< "$bootstrapHosts"
                doBootstrap=false
                nodesConfigOverwriteList=()
                for host in "${hostArray[@]}"; do
                  if [[ "$host" == "$HOSTNAME" ]]; then
                    doBootstrap=true
                    activeNodesConfig="{{ join "," $activeNodes }}"
                    IFS=',' read -r -a overwriteArray <<< "$activeNodesConfig"
                    for overwriteHost in "${overwriteArray[@]}"; do
                      nodesConfigOverwriteList+=("$overwriteHost")
                      if [[ "$overwriteHost" == "$HOSTNAME" ]]; then
                        break;
                      fi
                    done
                    break
                  fi
                done
                if [ "$doBootstrap" = true ] && [ ! -f "$HELM_MANAGER_BOOTSTRAPPED_FILE" ]; then
                  echo "$HOSTNAME must be started with bootstrap arg!"
                  overwriteCmd="$(joinArr "${nodesConfigOverwriteList[@]}")"
                  echo "Bootstrapping node config for this node: $overwriteCmd"
                  exec {{ printf "%s --set ozone.om.nodes.cluster1=" $flattenedArgs }}"$overwriteCmd" --bootstrap | bootstrap_finalizer
                else
                  echo "$HOSTNAME must not be started with bootstrap arg!"
                  exec {{ join " " $.Values.om.args }}
                fi
              {{- else }}
                echo "No bootstrap handling needed!"
                exec {{ join " " $.Values.om.args }}
              {{- end }}
          env:
            {{- include "ozone.configuration.env" . | nindent 12 }}
            - name: WAITFOR
              value: {{ $.Release.Name }}-scm-0.{{ $.Release.Name }}-scm-headless:9876
            - name: ENSURE_OM_INITIALIZED
              value: /data/metadata/om/current/VERSION
            {{- with $env }}
              {{- tpl (toYaml .) $ | nindent 12 }}
            {{- end }}
          {{- with $envFrom }}
          envFrom: {{- tpl (toYaml .) $ | nindent 12 }}
          {{- end }}
          ports:
            - name: rpc
              containerPort: 9862
            - name: ui
              containerPort: {{ .Values.om.service.port }}
            - name: ratis
              containerPort: 9872
          livenessProbe:
            httpGet:
              path: /
              port: ui
            initialDelaySeconds: 60
          volumeMounts:
            - name: config
              mountPath: {{ .Values.configuration.dir }}
            - name: {{ .Release.Name }}-om
              mountPath: {{ .Values.om.persistence.path }}
      {{- with $nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $securityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          projected:
            sources:
              - configMap:
                  name: {{ .Release.Name }}-ozone
              {{- with .Values.configuration.filesFrom }}
                {{- tpl (toYaml .) $ | nindent 14 }}
              {{- end }}
        {{- if not .Values.om.persistence.enabled }}
        - name: {{ .Release.Name }}-om
          emptyDir: { }
        {{- end }}
  {{- if .Values.om.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Release.Name }}-om
        labels:
          {{- include "ozone.labels" . | nindent 10 }}
          app.kubernetes.io/component: om
      spec:
        {{- with .Values.om.persistence.accessModes }}
        accessModes: {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.om.persistence.size }}
        {{- with .Values.scm.persistence.storageClassName }}
        storageClassName: {{ . }}
        {{- end }}
  {{- end }}